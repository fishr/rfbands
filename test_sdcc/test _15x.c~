#include <stdint.h>

#define STM8L05X
//#define STM8L15X

#ifdef STM8L15X
#define PC_ODR (*(volatile uint8_t *)0x500a)
#define PC_DDR (*(volatile uint8_t *)0x500c)
#define PC_CR1 (*(volatile uint8_t *)0x500d)

#define PE_ODR (*(volatile uint8_t *)0x5014)
#define PE_DDR (*(volatile uint8_t *)0x5016)
#define PE_CR1 (*(volatile uint8_t *)0x5017)

#define CLK_DIVR (*(volatile uint8_t *)0x50c0)
#define CLK_PCKENR2 (*(volatile uint8_t *)0x50c4)

#define TIM1_CR1 (*(volatile uint8_t *)0x52b0)
#define TIM1_PCNTRH (*(volatile uint8_t *)0x52bf)
#define TIM1_PCNTRL (*(volatile uint8_t *)0x52c0)
#define TIM1_PSCRH (*(volatile uint8_t * )0x52c1)
#define TIM1_PSCRL (*(volatile uint8_t *)0x52c2)

#elif STM8L05X
#define VUINT *(volatile uint8_t)
#define REG_OFF (0x5000)

#define IO_ODR 0x0
#define IO_IDR 0x1
#define IO_DDR 0x2
#define IO_CR1 0x3
#define IO_CR2 0x4

#define PORT_A (REG_OFF + 0x0)
#define PA_ODR (VUINT PORT_A + IO_ODR)
#define PA_IDR (VUINT PORT_A + IO_IDR)
#define PA_DDR (VUINT PORT_A + IO_DDR)
#define PA_CR1 (VUINT PORT_A + IO_CR1)
#define PA_CR2 (VUINT PORT_A + IO_CR2)

#define PORT_B (REG_OFF + 0x5)
#define PB_ODR (VUINT PORT_B + IO_ODR)
#define PB_IDR (VUINT PORT_B + IO_IDR)
#define PB_DDR (VUINT PORT_B + IO_DDR)
#define PB_CR1 (VUINT PORT_B + IO_CR1)
#define PB_CR2 (VUINT PORT_B + IO_CR2)

#define PORT_C (REG_OFF + 0xA)
#define PC_ODR (VUINT PORT_C + IO_ODR)
#define PC_IDR (VUINT PORT_C + IO_IDR)
#define PC_DDR (VUINT PORT_C + IO_DDR)
#define PC_CR1 (VUINT PORT_C + IO_CR1)
#define PC_CR2 (VUINT PORT_C + IO_CR2)

#define PORT_D (REG_OFF + 0xF)
#define PD_ODR (VUINT PORT_D + IO_ODR)
#define PD_IDR (VUINT PORT_D + IO_IDR)
#define PD_DDR (VUINT PORT_D + IO_DDR)
#define PD_CR1 (VUINT PORT_D + IO_CR1)
#define PD_CR2 (VUINT PORT_D + IO_CR2)

#define CLK_OFF (REG_OFF + 0xC0)
#define CLK_CKDIVR (VUINT CLK_OFF + 0x0)
#define CLK_PCKENR1 (VUINT CLK_OFF + 0x3)
#define CLK_PCKENR1_TIM2 1

#define TIM_CR1 0X0
#define TIM_CR2 0x1
#define TIM2_OFF 0x5250
#define

#endif
unsigned int clock(void)
{
    unsigned char h = TIM1_PCNTRH;
    unsigned char l = TIM1_PCNTRL;
    return((unsigned int)(h) << 8 | l);
}

void main(void)
{
    CLK_DIVR = 0x00; // Set the frequency to 16 MHz
#ifdef STM8L15X
    CLK_PCKENR2 |= 0x02; // Enable clock to timer
#elif STM8L05X
	CLK_PCKENR1 |= CLK_PCKENR1_TIM2;
#endif

    // Configure timer
    // 1000 ticks per second
    TIM1_PSCRH = 0x3e;
    TIM1_PSCRL = 0x80;
    // enable timer
    TIM1_CR1 = 0x01;

    // Configure pins
    PE_DDR = 0x80;
    PE_CR1 = 0x80;

    PC_DDR = 0x80;
    PC_CR1 = 0x80;

    for(;;)
    {
        PE_ODR &= 0x7f;
        if(clock() % 1000 <=500)
            PE_ODR |= 0x80;
        PC_ODR &= 0x7f;
        if(clock() % 2000 <= 1000)
            PC_ODR |= 0x80;
    }
}
